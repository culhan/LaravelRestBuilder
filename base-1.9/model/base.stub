<?php
// File ini ini di  buat dengan Laravel Rest Builder,
// Jika ada perubahan tambahkan code diantara comment "start custom code" dan "end custom code" di akhir file
// atau hubungi A'mal Sholihan
namespace App\Http\Models;

class {{Name}} extends BaseModelV2
{
    public $table = "{{table}}";

    // start list option

    // end list option    

    /**
     * [scopeGetJoin description]
     *
     * @param   [type]  $query  [$query description]
     * @param   [type]  $data   [$data description]
     *
     * @return  [type]          [return description]
     */
    public function scopeGetJoin($query, $data = [])
    {
        return $query
                // start raw join query
                // end raw join query
                ;
    }

    /**
     * [scopeGetSelect description]
     *
     * @param   [type]  $query  [$query description]
     * @param   [type]  $data   [$data description]
     *
     * @return  [type]          [return description]
     */
    public function scopeGetSelect($query, $data = [])
    {
        {{column}}
        return $query;
    }

    /**
     * [scopeGetUnion description]
     *
     * @param   [type]  $query  [$query description]
     * @param   [type]  $data   [$data description]
     *
     * @return  [type]          [return description]
     */
    public function scopeGetUnion($query, $data = [])
    {
        return $query
                // start list query union
                // end list query union
                ;
    }

    /**
     * [scopeGetOption description]
     *
     * @param   [type]  $query  [$query description]
     * @param   [type]  $data   [$data description]
     *
     * @return  [type]          [return description]
     */
    public function scopeGetOption($query, $data = [])
    {
        return $query
                // start list query option
                // end list query option
                ;
    }

    /**
     * [scopeGetAll description]
     *
     * @param   [type]  $query  [$query description]
     * @param   [type]  $data   [$data description]
     *
     * @return  [type]          [return description]
     */
    public function scopeGetAll($query, $data = [])
    {
        return $query->getJoin($data)
                    ->getSelect($data)                
                    ->getOption($data)
                    ->getUnion($data);
    }

    // start list accessor function

    // end list accessor function

    // start list relation function
    
    // end list relation function

    // start custom code    
    // end custom code

    /**
	 * [encapsulatedQuery description]
	 *
	 * @param   [type]  $alias  [$alias description]
	 *
	 * @return  [type]          [return description]
	 */
	public function scopeEncapsulatedQuery($query, $alias = 'myTable')
	{
		return $query;
	}

    /**
	 * [searchOperator description]
	 *
	 * @param   [type]  $query       [$query description]
	 * @param   [type]  $column      [$column description]
	 * @param   [type]  $text        [$text description]
	 * @param   [type]  $operator    [$operator description]
	 * @param   [type]  $conditions  [$conditions description]
	 *
	 * @return  [type]               [return description]
	 */
    public function searchOperator($query, $column, $text, $operator = 'like', $conditions = 'and')
	{	
        // special validate utk timestamp / datetime
        if( !is_array($column) ) {
            if( !empty($this->casts[$column]) ){
                if( $this->casts[$column] == 'timestamp' || $this->casts[$column] == 'datetime' ){
                    $this->validate([$column=>$text], [
                        $column => [
                            new \App\Rules\DateMultiFormat(['Y-m-d','Y-m-d H:i:s'])
                        ]
                    ]);
                }
            }
        }

        if( $operator == 'like' && !is_array($column)) {
            $this->sortableAndSearchableColumn[$column] = 'LOWER('.$this->sortableAndSearchableColumn[$column].')';
            $text = strtolower($text);
        }
        
        return parent::searchOperator($query, $column, $text, $operator, $conditions);
    }
    
    /**
     * [boot description]
     * @return [type] [description]
     */
    public static function boot()
    {
        parent::boot();

        self::creating(function($model){

            // start list creating option

            // end list creating option  

        });

        self::updating(function($model){
            
            // start list updating option

            // end list updating option

        });

        self::deleting(function($model){
            
            // start list deleting option

            // end list deleting option

        });

    }
}