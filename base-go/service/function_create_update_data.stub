func Service{{ModulName}}{{Name}}( tx *gorm.DB, data map[string]interface{}, c *gin.Context{{UrlParam}}) (interface{}, interface{}) {

    {{code_validation}}
    
    
    keyFirstOrCreate := map[string]interface{}{}
    model := models.{{ModulName}}Model{}
    
	{{code_sanitation}}
    // keyFirstOrCreate.Name = data["name"].(string)

    {{custom_code_before}}

    singleData := tx.Session(&gorm.Session{}).Model(&models.{{ModulName}}Model{}).Where(keyFirstOrCreate)
    
    status := singleData.Assign(&this_model).FirstOrCreate(&model)
    
    if status.RowsAffected > 0 {
        {{custom_code_modified_column}}
        singleData.Select(raw_column).Updates(&model)
    }

    {{custom_code_after}}

    var result map[string]interface{}
    inrec, _ := json.Marshal(this_model)
    json.Unmarshal(inrec, &result)

    {{relation_function}}

	resultData, err := repositories.GetSingleGormData{{ModulName}}(tx.Session(&gorm.Session{}), data, tx.Session(&gorm.Session{}).Where(keyFirstOrCreate), c)     
    if err != nil {
		return nil, err
	}
	    
	return resultData, nil
}
// end list function