func Service{{ModulName}}{{Name}}(data map[string]interface{}{{UrlParam}}) (interface{}, interface{}) {
    // begin a transaction
    tx := models.DB.Begin()

    {{code_validation}}
    
    raw_column := []string{}
    this_model := models.{{ModulName}}Model{}
    keyFirstOrCreate := models.{{ModulName}}Model{}
    
	{{code_sanitation}}
    keyFirstOrCreate.Id = 1
    _, err := repositories.GetSingleWhereData{{ModulName}}(tx, map[string]interface{}{}, keyFirstOrCreate) 
    if err != nil {
		return nil, err
	}

    singleData := tx.Model(&this_model).Where(keyFirstOrCreate)

	singleData.FirstOrCreate(&keyFirstOrCreate)
	
	resultUpdate := singleData.Select(raw_column).Updates(&this_model)

    if( resultUpdate.Error != nil ){
		return nil, resultUpdate.Error
    }
	
	singleData.Select("*").Find(&this_model)

    var result map[string]interface{}
    inrec, _ := json.Marshal(this_model)
    json.Unmarshal(inrec, &result)

    {{relation_function}}

	resultData, err := repositories.GetSingleWhereData{{ModulName}}(tx, map[string]interface{}{}, this_model) 
    if err != nil {
		return nil, err
	}

    // end transaction
    tx.Commit()
	    
	return resultData, nil
}
// end list function