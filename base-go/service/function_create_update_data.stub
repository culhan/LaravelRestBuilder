func Service{{ModulName}}{{Name}}(data map[string]interface{}{{UrlParam}}) (interface{}, interface{}) {
    // begin a transaction
    tx := models.DB.Begin()

    {{code_validation}}
    
    raw_column := []string{}
    this_model := models.{{ModulName}}Model{}
    keyFirstOrCreate := models.{{ModulName}}Model{}
    model := models.{{ModulName}}Model{}
    
	{{code_sanitation}}
    keyFirstOrCreate.Name = data["name"].(string)

    singleData := tx.Model(&models.ProductVariantUnitModel{}).Where(keyFirstOrCreate)
    
    status := singleData.Assign(&this_model).FirstOrCreate(&model)
    
    if status.RowsAffected > 0 {
        singleData.Updates(&model)
    }

    var result map[string]interface{}
    inrec, _ := json.Marshal(this_model)
    json.Unmarshal(inrec, &result)

    {{relation_function}}

	resultData, err := repositories.GetSingleWhereData{{ModulName}}(tx, map[string]interface{}{}, keyFirstOrCreate) 
    if err != nil {
		return nil, err
	}

    // end transaction
    tx.Commit()
	    
	return resultData, nil
}
// end list function