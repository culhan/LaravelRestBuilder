func Service{{ModulName}}{{Name}}( tx *gorm.DB, data map[string]interface{}, c *gin.Context{{UrlParam}}) (interface{}, interface{}) {

	keyFirstOrCreate := map[string]interface{}{}
	
    {{code_validation}}
    
    {{belongs_to_check_create}}    
    
	{{code_sanitation}}
    // keyFirstOrCreate.Name = data["name"].(string)

    {{custom_code_before}}

    singleData := tx.Session(&gorm.Session{}).Model(&this_model).Where(keyFirstOrCreate)

    status := singleData.Take(map[string]interface{}{})

	this_model = this_model.Assign(dataRecord)
	if status.RowsAffected == 0 {
		tx.Session(&gorm.Session{}).Select(this_model.Fillable("create", dataRecord)).Create(&this_model)
	} else {
		resultUpdate := singleData.Select(this_model.Fillable("update", dataRecord)).Updates(&this_model)

		if resultUpdate.Error != nil {
			errorState := exceptions.ErrorException(500, "update "+this_model.ModulName()+" failed")

			return nil, errorState
		}

		singleData.Select(`*`).Find(&this_model)
	}    

    var result map[string]interface{}
    inrec, _ := json.Marshal(this_model)
    json.Unmarshal(inrec, &result)

    {{relation_function}}

    // custom code after
    {{custom_code_after}}

	resultData, err := repositories.GetSingleGormData{{ModulName}}(tx.Session(&gorm.Session{}), data, tx.Session(&gorm.Session{}).Where(keyFirstOrCreate), c)     
    if err != nil {
		return nil, err
	}
	    
	return resultData, nil
}
// end list function