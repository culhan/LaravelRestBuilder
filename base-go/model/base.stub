// File ini ini di  buat dengan Go Rest Builder,
// Jika ada perubahan tambahkan code diantara comment "start custom code" dan "end custom code" di akhir file
// atau hubungi A'mal Sholihan
package models

import (
	"reflect"
    "gorm.io/gorm"
    {{class}}
)

type {{Name}}Model struct {
    {{column}}
}

func (s {{Name}}Model) TableName() string {
	return "{{table}}"
}

func (s {{Name}}Model) ModulName() string {
	return "{{name}}"
}

func (s {{Name}}Model) ScopesGetReflectSelect(data interface{}) reflect.Value {
    data = data.(map[string]interface{})
	selectColumn := struct {
		{{select_column}}
	}{
		{{select_column_attribute}}
	}

	return reflect.ValueOf(&selectColumn)
}

func (s {{Name}}Model) ScopesGetSelect(data interface{}) func (db *gorm.DB) *gorm.DB {
  return func (db *gorm.DB) *gorm.DB {
	db = db.Select(BuildSelect(s.ScopesGetReflectSelect(data)))
    return db
  }
}

func (s {{Name}}Model) ScopesGetAll(data interface{}) func (db *gorm.DB) *gorm.DB {
  return func (db *gorm.DB) *gorm.DB {
    data = data.(map[string]interface{})
    return db.Scopes( s.ScopesGetSelect(data), s.ScopesGetJoin(data), s.ScopesGetUnion(data), s.ScopesGetOptions(data) )
  }
}

func (s {{Name}}Model) getAll(data interface{}) func (db *gorm.DB) *gorm.DB {
  return func (db *gorm.DB) *gorm.DB {
    data = data.(map[string]interface{})
    return db.Scopes( s.ScopesGetSelect(data), s.ScopesGetJoin(data), s.ScopesGetUnion(data), s.ScopesGetOptions(data) )
  }
}

func (s {{Name}}Model) ScopesGetJoin(data interface{}) func (db *gorm.DB) *gorm.DB {
  return func (db *gorm.DB) *gorm.DB {
    data = data.(map[string]interface{})
    return db
  }
}

func (s {{Name}}Model) ScopesGetUnion(data interface{}) func (db *gorm.DB) *gorm.DB {
  return func (db *gorm.DB) *gorm.DB {
    data = data.(map[string]interface{})
    return db
  }
}

func (s {{Name}}Model) ScopesGetOptions(data interface{}) func (db *gorm.DB) *gorm.DB {
  return func (db *gorm.DB) *gorm.DB {
    data = data.(map[string]interface{})
    // start list query option

    // end list query option
    return db
  }
}

func (s *{{Name}}Model) BeforeCreate(tx *gorm.DB) (err error) {
    // start list creating option

    // end list creating option
  	return
}

func (s *{{Name}}Model) BeforeUpdate(tx *gorm.DB) (err error) {
    // start list updating option

    // end list updating option
  	return
}

func (s *{{Name}}Model) BeforeDelete(tx *gorm.DB) (err error) {
    // start list deleting option

    // end list deleting option
  	return
}

// start custom code    
// end custom code