// File ini ini di  buat dengan Go Rest Builder,
// Jika ada perubahan tambahkan code diantara comment "start custom code" dan "end custom code" di akhir file
// atau hubungi A'mal Sholihan
package models

import (
    {{class}}
)

type {{Name}}Model struct {
    {{column}}
}

func (s {{Name}}Model) TableName() string {
	return `{{table}}`
}

func (s {{Name}}Model) ModulName() string {
	return `{{model_name_err}}`
}

func (s {{Name}}Model) ScopesGetReflectSelect(data interface{}) reflect.Value {
	db := data.(map[string]interface{})["db"].(*gorm.DB)

  c_interaface, _ := db.Get("gin_context")
	c := c_interaface.(*gin.Context)
  c = c

	selectColumn := map[string]interface{}{}
  
	{{select_column_with_function}}

	return reflect.ValueOf(&selectColumn)
}

func (s {{Name}}Model) ScopesGetSelect(data interface{}) func (db *gorm.DB) *gorm.DB {
  return func (db *gorm.DB) *gorm.DB {
    data := data.(map[string]interface{})
	data["db"] = db
	db = db.Select(BuildSelect(s.ScopesGetReflectSelect(data)))
    return db
  }
}

func (s {{Name}}Model) ScopesGetAll(data interface{}) func (db *gorm.DB) *gorm.DB {
  return func (db *gorm.DB) *gorm.DB {
    return Process(db, data, {{Name}}Model{})
  }
}

func (s {{Name}}Model) getAll(data interface{}) func (db *gorm.DB) *gorm.DB {
  return func (db *gorm.DB) *gorm.DB {
    return db.Scopes( s.ScopesGetSelect(data), s.ScopesGetJoin(data), s.ScopesGetOptions(data), s.ScopesGetUnion(data) )
  }
}

func (s {{Name}}Model) ScopesGetJoin(data interface{}) func (db *gorm.DB) *gorm.DB {
  return func (db *gorm.DB) *gorm.DB {
    return db.Joins(`{{custom_join}}`)
  }
}

func (s {{Name}}Model) ScopesGetUnion(data interface{}) func (db *gorm.DB) *gorm.DB {
  return func (db *gorm.DB) *gorm.DB {
    // start list query union
    // end list query union
    return db
  }
}

func (s {{Name}}Model) ScopesGetOptions(data interface{}) func (db *gorm.DB) *gorm.DB {
  return func (db *gorm.DB) *gorm.DB {
    // start list query option
    // end list query option
    return db
  }
}

func (s *{{Name}}Model) BeforeCreate(db *gorm.DB) (err error) {
    // start list creating option
    // end list creating option
  	return
}

func (s *{{Name}}Model) BeforeUpdate(db *gorm.DB) (err error) {
    // start list updating option
    // end list updating option
  	return
}

func (s *{{Name}}Model) BeforeDelete(db *gorm.DB) (err error) {
    // start list deleting option
    // end list deleting option
  	return
}

// start custom code    
// end custom code